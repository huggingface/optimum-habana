1a2
> # coding=utf-8
25c26
< from typing import Any, Optional, Union
---
> from typing import Any, Dict, List, Optional, Union
30,31d30
< from datasets import DatasetDict, load_dataset
< 
32a32
> from datasets import DatasetDict, load_dataset
40,42d39
<     Seq2SeqTrainer,
<     Seq2SeqTrainingArguments,
<     set_seed,
47a45,55
> from optimum.habana import GaudiConfig, GaudiSeq2SeqTrainer, GaudiSeq2SeqTrainingArguments
> from optimum.habana.utils import set_seed
> 
> 
> try:
>     from optimum.habana.utils import check_optimum_habana_min_version
> except ImportError:
> 
>     def check_optimum_habana_min_version(*a, **b):
>         return ()
> 
50c58,59
< check_min_version("4.52.0.dev0")
---
> check_min_version("4.51.0")
> check_optimum_habana_min_version("1.18.0.dev0")
112c121
<     forced_decoder_ids: list[list[int]] = field(
---
>     forced_decoder_ids: List[List[int]] = field(
116c125
<     suppress_tokens: list[int] = field(
---
>     suppress_tokens: List[int] = field(
229a239,242
>     label_features_max_length: int = field(
>         default=None,
>         metadata={"help": "Max length for padding label features."},
>     )
247a261
>     label_features_max_length: int
249c263
<     def __call__(self, features: list[dict[str, Union[list[int], torch.Tensor]]]) -> dict[str, torch.Tensor]:
---
>     def __call__(self, features: List[Dict[str, Union[List[int], torch.Tensor]]]) -> Dict[str, torch.Tensor]:
261c275,279
<         labels_batch = self.processor.tokenizer.pad(label_features, return_tensors="pt")
---
>         kwargs = {}
>         if self.label_features_max_length is not None:
>             kwargs["padding"] = "max_length"
>             kwargs["max_length"] = self.label_features_max_length
>         labels_batch = self.processor.tokenizer.pad(label_features, return_tensors="pt", **kwargs)
281c299
<     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, Seq2SeqTrainingArguments))
---
>     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, GaudiSeq2SeqTrainingArguments))
308a327,332
>     gaudi_config = GaudiConfig.from_pretrained(
>         training_args.gaudi_config_name,
>         cache_dir=model_args.cache_dir,
>         token=model_args.token,
>     )
> 
309a334
>     mixed_precision = training_args.bf16 or gaudi_config.use_torch_autocast
311,312c336,338
<         f"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}, "
<         f"distributed training: {training_args.parallel_mode.value == 'distributed'}, 16-bits training: {training_args.fp16}"
---
>         f"Process rank: {training_args.local_rank}, device: {training_args.device}, "
>         + f"distributed training: {training_args.parallel_mode.value == 'distributed'}, "
>         + f"mixed-precision training: {mixed_precision}"
443d468
<         model.generation_config.forced_decoder_ids = model_args.forced_decoder_ids
457a483,486
>         logger.warning(
>             f"The dataset sampling rate ({dataset_sampling_rate}) is different from the feature extractor one"
>             f" ({feature_extractor.sampling_rate}).Data resampling should be done."
>         )
554c583,584
<             config.save_pretrained(training_args.output_dir)
---
>             # TODO: uncomment the line below when this is fixed in Transformers
>             # config.save_pretrained(training_args.output_dir)
562a593
>         label_features_max_length=data_args.label_features_max_length,
566c597
<     trainer = Seq2SeqTrainer(
---
>     trainer = GaudiSeq2SeqTrainer(
567a599
>         gaudi_config=gaudi_config,
