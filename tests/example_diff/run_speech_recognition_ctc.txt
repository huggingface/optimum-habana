33,34d32
< from datasets import DatasetDict, load_dataset
< 
35a34
> from datasets import DatasetDict, load_dataset
43,44d41
<     Trainer,
<     TrainingArguments,
46d42
<     set_seed,
51a48,49
> from optimum.habana import GaudiConfig, GaudiTrainer, GaudiTrainingArguments
> from optimum.habana.utils import set_seed
53,54d50
< # Will error if the minimal version of Transformers is not installed. Remove at your own risks.
< check_min_version("4.38.0.dev0")
56c52,57
< require_version("datasets>=1.18.0", "To fix: pip install -r examples/pytorch/speech-recognition/requirements.txt")
---
> try:
>     from optimum.habana.utils import check_optimum_habana_min_version
> except ImportError:
> 
>     def check_optimum_habana_min_version(*a, **b):
>         return ()
60a62,67
> # Will error if the minimal version of Transformers and Optimum Habana are not installed. Remove at your own risks.
> check_min_version("4.34.0")
> check_optimum_habana_min_version("1.8.1")
> 
> require_version("datasets>=1.18.0", "To fix: pip install -r examples/pytorch/speech-recognition/requirements.txt")
> 
145c152
<             "help": "Whether a convolutional attention network should be stacked on top of the Wav2Vec2Bert Encoder. Can be very"
---
>             "help": "Whether a convolutional attention network should be stacked on top of the Wav2Vec2Bert Encoder. Can be very "
155d161
< 
407c413
<     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, TrainingArguments))
---
>     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, GaudiTrainingArguments))
450a457,462
>     gaudi_config = GaudiConfig.from_pretrained(
>         training_args.gaudi_config_name,
>         cache_dir=model_args.cache_dir,
>         use_auth_token=True if data_args.use_auth_token else None,
>     )
> 
451a464
>     mixed_precision = training_args.bf16 or gaudi_config.use_torch_autocast
453,454c466,468
<         f"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}, "
<         f"distributed training: {training_args.parallel_mode.value == 'distributed'}, 16-bits training: {training_args.fp16}"
---
>         f"Process rank: {training_args.local_rank}, device: {training_args.device}, "
>         + f"distributed training: {training_args.parallel_mode.value == 'distributed'}, "
>         + f"mixed-precision training: {mixed_precision}"
467,473c481,486
<     if training_args.do_train:
<         raw_datasets["train"] = load_dataset(
<             data_args.dataset_name,
<             data_args.dataset_config_name,
<             split=data_args.train_split_name,
<             token=data_args.token,
<         )
---
>     raw_datasets["train"] = load_dataset(
>         data_args.dataset_name,
>         data_args.dataset_config_name,
>         split=data_args.train_split_name,
>         token=data_args.token,
>     )
475,480c488,493
<         if data_args.audio_column_name not in raw_datasets["train"].column_names:
<             raise ValueError(
<                 f"--audio_column_name '{data_args.audio_column_name}' not found in dataset '{data_args.dataset_name}'."
<                 " Make sure to set `--audio_column_name` to the correct audio column - one of"
<                 f" {', '.join(raw_datasets['train'].column_names)}."
<             )
---
>     if data_args.audio_column_name not in raw_datasets["train"].column_names:
>         raise ValueError(
>             f"--audio_column_name '{data_args.audio_column_name}' not found in dataset '{data_args.dataset_name}'."
>             " Make sure to set `--audio_column_name` to the correct audio column - one of"
>             f" {', '.join(raw_datasets['train'].column_names)}."
>         )
482,487c495,500
<         if data_args.text_column_name not in raw_datasets["train"].column_names:
<             raise ValueError(
<                 f"--text_column_name {data_args.text_column_name} not found in dataset '{data_args.dataset_name}'. "
<                 "Make sure to set `--text_column_name` to the correct text column - one of "
<                 f"{', '.join(raw_datasets['train'].column_names)}."
<             )
---
>     if data_args.text_column_name not in raw_datasets["train"].column_names:
>         raise ValueError(
>             f"--text_column_name {data_args.text_column_name} not found in dataset '{data_args.dataset_name}'. "
>             "Make sure to set `--text_column_name` to the correct text column - one of "
>             f"{', '.join(raw_datasets['train'].column_names)}."
>         )
489,490c502,503
<         if data_args.max_train_samples is not None:
<             raw_datasets["train"] = raw_datasets["train"].select(range(data_args.max_train_samples))
---
>     if data_args.max_train_samples is not None:
>         raw_datasets["train"] = raw_datasets["train"].select(range(data_args.max_train_samples))
508c521
<         f'[{"".join(data_args.chars_to_ignore)}]' if data_args.chars_to_ignore is not None else None
---
>         f'[{"".join(data_args.chars_to_ignore).replace(" ", "")}]' if data_args.chars_to_ignore is not None else None
647a661,665
>         raise RuntimeError(
>             f"The dataset sampling rate ({dataset_sampling_rate}) is different from the feature extractor one"
>             f" ({feature_extractor.sampling_rate}).Data resampling should be done. The Datasets library does not"
>             " support it on HPUs yet."
>         )
753c771,774
<         processor=processor, feature_extractor_input_name=feature_extractor_input_name
---
>         processor=processor,
>         feature_extractor_input_name=feature_extractor_input_name,
>         pad_to_multiple_of=int(max_input_length),
>         pad_to_multiple_of_labels=500,
757c778
<     trainer = Trainer(
---
>     trainer = GaudiTrainer(
758a780
>         gaudi_config=gaudi_config,
