3c3
< # Copyright 2020 The HuggingFace Inc. team. All rights reserved.
---
> # Copyright 2022 The HuggingFace Inc. team. All rights reserved.
17,19c17,18
< Fine-tuning the library models for causal language modeling (GPT, GPT-2, CTRL, ...) on a text file or a dataset.
< 
< Here is the full list of checkpoints on the hub that can be fine-tuned by this script:
---
> Training the library models for causal language modeling (GPT, GPT-2, CTRL, ...) on a text file or a dataset.
> Here is the full list of checkpoints on the hub that can be trained by this script:
36,37d34
< from datasets import load_dataset
< 
38a36
> from datasets import load_dataset
46,47d43
<     Trainer,
<     TrainingArguments,
49,50d44
<     is_torch_tpu_available,
<     set_seed,
56a51,52
> from optimum.habana import GaudiConfig, GaudiTrainer, GaudiTrainingArguments
> from optimum.habana.utils import set_seed
58,59d53
< # Will error if the minimal version of Transformers is not installed. Remove at your own risks.
< check_min_version("4.35.0.dev0")
61c55,61
< require_version("datasets>=1.8.0", "To fix: pip install -r examples/pytorch/language-modeling/requirements.txt")
---
> try:
>     from optimum.habana.utils import check_optimum_habana_min_version
> except ImportError:
> 
>     def check_optimum_habana_min_version(*a, **b):
>         return ()
> 
64a65,70
> # Will error if the minimal version of Transformers and Optimum Habana are not installed. Remove at your own risks.
> check_min_version("4.34.0")
> check_optimum_habana_min_version("1.8.0")
> 
> require_version("datasets>=1.8.0", "To fix: pip install -r examples/pytorch/language-modeling/requirements.txt")
> 
80c86,87
<                 "The model checkpoint for weights initialization. Don't set if you want to train a model from scratch."
---
>                 "The model checkpoint for weights initialization. Don't set it if you want to train a model from"
>                 " scratch."
135c142
<                 "should only be set to `True` for repositories you trust and in which you have read the code, as it will "
---
>                 "should only be set to `True` for repositories you trust and in which you have read the code, as it will"
149a157,165
>     use_cache: bool = field(
>         default=True,
>         metadata={
>             "help": (
>                 "Whether or not the model should return the last key/values attentions (not used by all models)."
>                 "Only relevant if `config.is_decoder=True`."
>             )
>         },
>     )
154c170
<                 "It is an option to create the model as an empty shell, then only materialize its parameters when the pretrained weights are loaded. "
---
>                 "It is an option to create the model as an empty shell, then only materialize its parameters when the pretrained weights are loaded."
202c218,219
<     streaming: bool = field(default=False, metadata={"help": "Enable streaming mode"})
---
> 
>     streaming: bool = field(default=False, metadata={"help": "Enable streaming mode."})
250c267
<     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, TrainingArguments))
---
>     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, GaudiTrainingArguments))
259c276,278
<         warnings.warn("The `use_auth_token` argument is deprecated and will be removed in v4.34.", FutureWarning)
---
>         warnings.warn(
>             "The `use_auth_token` argument is deprecated and will be removed in Transformers v4.34.", FutureWarning
>         )
285a305,311
>     gaudi_config = GaudiConfig.from_pretrained(
>         training_args.gaudi_config_name,
>         cache_dir=model_args.cache_dir,
>         revision=model_args.model_revision,
>         use_auth_token=True if model_args.use_auth_token else None,
>     )
> 
286a313
>     mixed_precision = training_args.bf16 or gaudi_config.use_torch_autocast or gaudi_config.use_habana_mixed_precision
288,289c315,317
<         f"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}"
<         + f"distributed training: {training_args.parallel_mode.value == 'distributed'}, 16-bits training: {training_args.fp16}"
---
>         f"Process rank: {training_args.local_rank}, device: {training_args.device}, "
>         + f"distributed training: {training_args.parallel_mode.value == 'distributed'}, "
>         + f"mixed-precision training: {mixed_precision}"
400a429
>         "use_cache": False if training_args.gradient_checkpointing else model_args.use_cache,
427c456
<             "You are instantiating a new tokenizer from scratch. This is not supported by this script. "
---
>             "You are instantiating a new tokenizer from scratch. This is not supported by this script."
500c529
<         if block_size > config.max_position_embeddings:
---
>         if block_size > 1024:
502,503c531,533
<                 f"The tokenizer picked seems to have a very large `model_max_length` ({tokenizer.model_max_length}). "
<                 f"Using block_size={min(1024, config.max_position_embeddings)} instead. You can change that default value by passing --block_size xxx."
---
>                 "The chosen tokenizer supports a `model_max_length` that is longer than the default `block_size` value"
>                 " of 1024. If you would like to use a longer `block_size` up to `tokenizer.model_max_length` you can"
>                 " override this default with `--block_size xxx`."
505c535
<             block_size = min(1024, config.max_position_embeddings)
---
>             block_size = 1024
509c539
<                 f"The block_size passed ({data_args.block_size}) is larger than the maximum length for the model "
---
>                 f"The block_size passed ({data_args.block_size}) is larger than the maximum length for the model"
586c616
<     trainer = Trainer(
---
>     trainer = GaudiTrainer(
587a618
>         gaudi_config=gaudi_config,
594,597c625,626
<         compute_metrics=compute_metrics if training_args.do_eval and not is_torch_tpu_available() else None,
<         preprocess_logits_for_metrics=preprocess_logits_for_metrics
<         if training_args.do_eval and not is_torch_tpu_available()
<         else None,
---
>         compute_metrics=compute_metrics if training_args.do_eval else None,
>         preprocess_logits_for_metrics=preprocess_logits_for_metrics if training_args.do_eval else None,
612,615c641,647
<         max_train_samples = (
<             data_args.max_train_samples if data_args.max_train_samples is not None else len(train_dataset)
<         )
<         metrics["train_samples"] = min(max_train_samples, len(train_dataset))
---
>         if data_args.streaming:
>             metrics["train_samples"] = training_args.max_steps * training_args.per_device_train_batch_size
>         else:
>             max_train_samples = (
>                 data_args.max_train_samples if data_args.max_train_samples is not None else len(train_dataset)
>             )
>             metrics["train_samples"] = min(max_train_samples, len(train_dataset))
624d655
< 
627,628c658,663
<         max_eval_samples = data_args.max_eval_samples if data_args.max_eval_samples is not None else len(eval_dataset)
<         metrics["eval_samples"] = min(max_eval_samples, len(eval_dataset))
---
>         if not data_args.streaming:
>             max_eval_samples = (
>                 data_args.max_eval_samples if data_args.max_eval_samples is not None else len(eval_dataset)
>             )
>             metrics["eval_samples"] = min(max_eval_samples, len(eval_dataset))
> 
651,655d685
< 
< 
< def _mp_fn(index):
<     # For xla_spawn (TPUs)
<     main()
