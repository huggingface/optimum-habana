30a31
> import transformers
33,34d33
< 
< import transformers
41,42d39
<     Seq2SeqTrainingArguments,
<     set_seed,
47a45,46
> from optimum.habana import GaudiConfig, GaudiSeq2SeqTrainingArguments
> from optimum.habana.utils import set_seed
49,50d47
< # Will error if the minimal version of Transformers is not installed. Remove at your own risks.
< check_min_version("4.39.0.dev0")
52c49,55
< require_version("datasets>=1.8.0", "To fix: pip install -r examples/pytorch/question-answering/requirements.txt")
---
> try:
>     from optimum.habana.utils import check_optimum_habana_min_version
> except ImportError:
> 
>     def check_optimum_habana_min_version(*a, **b):
>         return ()
> 
55a59,64
> # Will error if the minimal version of Transformers and Optimum Habana are not installed. Remove at your own risks.
> check_min_version("4.37.0")
> check_optimum_habana_min_version("1.10.0")
> 
> require_version("datasets>=1.8.0", "To fix: pip install -r examples/pytorch/question-answering/requirements.txt")
> 
185c194
<                 " batching to the maximum length in the batch (which can be faster on GPU but will be slower on TPU)."
---
>                 " batching to the maximum length in the batch (which can be faster on GPU but will be slower on HPU)."
285c294
<     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, Seq2SeqTrainingArguments))
---
>     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, GaudiSeq2SeqTrainingArguments))
323a333,339
>     gaudi_config = GaudiConfig.from_pretrained(
>         training_args.gaudi_config_name,
>         cache_dir=model_args.cache_dir,
>         revision=model_args.model_revision,
>         use_auth_token=True if model_args.use_auth_token else None,
>     )
> 
324a341
>     mixed_precision = training_args.bf16 or gaudi_config.use_torch_autocast
326,327c343,345
<         f"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}, "
<         + f"distributed training: {training_args.parallel_mode.value == 'distributed'}, 16-bits training: {training_args.fp16}"
---
>         f"Process rank: {training_args.local_rank}, device: {training_args.device}, "
>         + f"distributed training: {training_args.parallel_mode.value == 'distributed'}, "
>         + f"mixed-precision training: {mixed_precision}"
676a695
>         gaudi_config=gaudi_config,
750,754d768
< 
< 
< def _mp_fn(index):
<     # For xla_spawn (TPUs)
<     main()
