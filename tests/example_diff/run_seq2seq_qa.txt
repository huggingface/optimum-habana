29a30
> import transformers
32,33d32
< 
< import transformers
40,41d38
<     Seq2SeqTrainingArguments,
<     set_seed,
46a44,46
> from optimum.habana import GaudiConfig, GaudiSeq2SeqTrainingArguments
> from optimum.habana.utils import set_seed
> 
49c49
< check_min_version("4.32.0.dev0")
---
> check_min_version("4.31.0")
168c168
<                 " batching to the maximum length in the batch (which can be faster on GPU but will be slower on TPU)."
---
>                 " batching to the maximum length in the batch (which can be faster on GPU but will be slower on HPU)."
268c268
<     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, Seq2SeqTrainingArguments))
---
>     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, GaudiSeq2SeqTrainingArguments))
297a298,304
>     gaudi_config = GaudiConfig.from_pretrained(
>         training_args.gaudi_config_name,
>         cache_dir=model_args.cache_dir,
>         revision=model_args.model_revision,
>         use_auth_token=True if model_args.use_auth_token else None,
>     )
> 
298a306
>     mixed_precision = training_args.bf16 or gaudi_config.use_torch_autocast or gaudi_config.use_habana_mixed_precision
300,301c308,310
<         f"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}"
<         + f"distributed training: {training_args.parallel_mode.value == 'distributed'}, 16-bits training: {training_args.fp16}"
---
>         f"Process rank: {training_args.local_rank}, device: {training_args.device}, "
>         + f"distributed training: {bool(training_args.local_rank != -1)}, "
>         + f"mixed-precision training: {mixed_precision}"
645a655
>         gaudi_config=gaudi_config,
719,723d728
< 
< 
< def _mp_fn(index):
<     # For xla_spawn (TPUs)
<     main()
