17,19c17,18
< Fine-tuning the library models for masked language modeling (BERT, ALBERT, RoBERTa...) on a text file or a dataset.
< 
< Here is the full list of checkpoints on the hub that can be fine-tuned by this script:
---
> Training the library models for masked language modeling (BERT, ALBERT, RoBERTa...) on a text file or a dataset.
> Here is the full list of checkpoints on the hub that can be trained by this script:
35,36d33
< from datasets import load_dataset
< 
37a35
> from datasets import load_dataset
46,49d43
<     Trainer,
<     TrainingArguments,
<     is_torch_tpu_available,
<     set_seed,
54a49,51
> from optimum.habana import GaudiConfig, GaudiTrainer, GaudiTrainingArguments
> from optimum.habana.utils import set_seed
> 
57c54
< check_min_version("4.32.0.dev0")
---
> check_min_version("4.31.0")
226c223
<     streaming: bool = field(default=False, metadata={"help": "Enable streaming mode"})
---
>     streaming: bool = field(default=False, metadata={"help": "Enable streaming mode."})
250c247
<     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, TrainingArguments))
---
>     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, GaudiTrainingArguments))
259c256,258
<         warnings.warn("The `use_auth_token` argument is deprecated and will be removed in v4.34.", FutureWarning)
---
>         warnings.warn(
>             "The `use_auth_token` argument is deprecated and will be removed in Transformers v4.34.", FutureWarning
>         )
285a285,291
>     gaudi_config = GaudiConfig.from_pretrained(
>         training_args.gaudi_config_name,
>         cache_dir=model_args.cache_dir,
>         revision=model_args.model_revision,
>         use_auth_token=True if model_args.use_auth_token else None,
>     )
> 
286a293
>     mixed_precision = training_args.bf16 or gaudi_config.use_torch_autocast or gaudi_config.use_habana_mixed_precision
288,289c295,297
<         f"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}"
<         + f"distributed training: {training_args.parallel_mode.value == 'distributed'}, 16-bits training: {training_args.fp16}"
---
>         f"Process rank: {training_args.local_rank}, device: {training_args.device}, "
>         + f"distributed training: {training_args.parallel_mode.value == 'distributed'}, "
>         + f"mixed-precision training: {mixed_precision}"
291d298
<     # Set the verbosity to info of the Transformers logger (on main process only):
613c620
<     trainer = Trainer(
---
>     trainer = GaudiTrainer(
614a622
>         gaudi_config=gaudi_config,
620,623c628,629
<         compute_metrics=compute_metrics if training_args.do_eval and not is_torch_tpu_available() else None,
<         preprocess_logits_for_metrics=preprocess_logits_for_metrics
<         if training_args.do_eval and not is_torch_tpu_available()
<         else None,
---
>         compute_metrics=compute_metrics if training_args.do_eval else None,
>         preprocess_logits_for_metrics=preprocess_logits_for_metrics if training_args.do_eval else None,
676,680d681
< 
< 
< def _mp_fn(index):
<     # For xla_spawn (TPUs)
<     main()
