3c3
< # Copyright 2020 The HuggingFace Team All rights reserved.
---
> # Copyright 2022 The HuggingFace Team All rights reserved.
29a30
> import transformers
32,34d32
< from utils_qa import postprocess_qa_predictions
< 
< import transformers
43d40
<     TrainingArguments,
45d41
<     set_seed,
49a46
> from utils_qa import postprocess_qa_predictions
50a48,49
> from optimum.habana import GaudiConfig, GaudiTrainingArguments
> from optimum.habana.utils import set_seed
52,53d50
< # Will error if the minimal version of Transformers is not installed. Remove at your own risks.
< check_min_version("4.42.0.dev0")
55c52,58
< require_version("datasets>=1.8.0", "To fix: pip install -r examples/pytorch/question-answering/requirements.txt")
---
> try:
>     from optimum.habana.utils import check_optimum_habana_min_version
> except ImportError:
> 
>     def check_optimum_habana_min_version(*a, **b):
>         return ()
> 
58a62,67
> # Will error if the minimal version of Transformers and Optimum Habana are not installed. Remove at your own risks.
> check_min_version("4.38.0")
> check_optimum_habana_min_version("1.10.0")
> 
> require_version("datasets>=1.8.0", "To fix: pip install -r examples/pytorch/question-answering/requirements.txt")
> 
146c155
<                 " batching to the maximum length in the batch (which can be faster on GPU but will be slower on TPU)."
---
>                 " batching to the maximum length in the batch (which can be faster on GPU but will be slower on HPU)."
233c242
<     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, TrainingArguments))
---
>     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, GaudiTrainingArguments))
262a272,278
>     gaudi_config = GaudiConfig.from_pretrained(
>         training_args.gaudi_config_name,
>         cache_dir=model_args.cache_dir,
>         revision=model_args.model_revision,
>         token=model_args.token,
>     )
> 
263a280
>     mixed_precision = training_args.bf16 or gaudi_config.use_torch_autocast
265,266c282,284
<         f"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}, "
<         + f"distributed training: {training_args.parallel_mode.value == 'distributed'}, 16-bits training: {training_args.fp16}"
---
>         f"Process rank: {training_args.local_rank}, device: {training_args.device}, "
>         + f"distributed training: {training_args.parallel_mode.value == 'distributed'}, "
>         + f"mixed-precision training: {mixed_precision}"
346a365,368
>     if config.model_type == "llama":
>         if tokenizer.pad_token is None:
>             tokenizer.add_special_tokens({"pad_token": "[PAD]"})
>         tokenizer.cls_token = tokenizer.bos_token
637a660
>         gaudi_config=gaudi_config,
706,710d728
< 
< 
< def _mp_fn(index):
<     # For xla_spawn (TPUs)
<     main()
