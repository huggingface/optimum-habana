3c3
< # Copyright 2021 The HuggingFace Team. All rights reserved.
---
> # Copyright 2022 The HuggingFace Team. All rights reserved.
20a21
> import copy
30a32
> import transformers
33,34d34
< 
< import transformers
45,47c45
<     Seq2SeqTrainer,
<     Seq2SeqTrainingArguments,
<     set_seed,
---
>     default_data_collator,
52a51,53
> from optimum.habana import GaudiConfig, GaudiSeq2SeqTrainer, GaudiSeq2SeqTrainingArguments
> from optimum.habana.utils import set_seed
> 
55c56
< check_min_version("4.32.0.dev0")
---
> check_min_version("4.31.0")
119a121,129
>     use_cache: bool = field(
>         default=True,
>         metadata={
>             "help": (
>                 "Whether or not the model should return the last key/values attentions (not used by all models)."
>                 "Only relevant if `config.is_decoder=True`."
>             )
>         },
>     )
203c213
<                 "efficient on GPU but very bad for TPU."
---
>                 "efficient on GPU but very bad for HPU in lazy mode."
251a262
>     source_suffix: Optional[str] = field(default="", metadata={"help": "A suffix to add after every source text."})
307c318
<     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, Seq2SeqTrainingArguments))
---
>     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, GaudiSeq2SeqTrainingArguments))
336a348,354
>     gaudi_config = GaudiConfig.from_pretrained(
>         training_args.gaudi_config_name,
>         cache_dir=model_args.cache_dir,
>         revision=model_args.model_revision,
>         use_auth_token=True if model_args.use_auth_token else None,
>     )
> 
337a356
>     mixed_precision = training_args.bf16 or gaudi_config.use_torch_autocast or gaudi_config.use_habana_mixed_precision
339,340c358,360
<         f"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}"
<         + f"distributed training: {training_args.parallel_mode.value == 'distributed'}, 16-bits training: {training_args.fp16}"
---
>         f"Process rank: {training_args.local_rank}, device: {training_args.device}, "
>         + f"distributed training: {bool(training_args.local_rank != -1)}, "
>         + f"mixed-precision training: {mixed_precision}"
420a441
>         use_cache=False if training_args.gradient_checkpointing else model_args.use_cache,
473a495
>     suffix = data_args.source_suffix if data_args.source_suffix is not None else ""
544a567,568
>             else:
>                 raise ValueError("Found case where either text or summary is missing.")
546c570
<         inputs = [prefix + inp for inp in inputs]
---
>         inputs = [prefix + inp + suffix for inp in inputs]
611,616c635,643
<     data_collator = DataCollatorForSeq2Seq(
<         tokenizer,
<         model=model,
<         label_pad_token_id=label_pad_token_id,
<         pad_to_multiple_of=8 if training_args.fp16 else None,
<     )
---
>     if data_args.pad_to_max_length:
>         data_collator = default_data_collator
>     else:
>         data_collator = DataCollatorForSeq2Seq(
>             tokenizer,
>             model=model,
>             label_pad_token_id=label_pad_token_id,
>             pad_to_multiple_of=8 if training_args.fp16 else None,
>         )
651,658c678,686
<     training_args.generation_max_length = (
<         training_args.generation_max_length
<         if training_args.generation_max_length is not None
<         else data_args.val_max_target_length
<     )
<     training_args.generation_num_beams = (
<         data_args.num_beams if data_args.num_beams is not None else training_args.generation_num_beams
<     )
---
>     training_args.generation_config = copy.deepcopy(model.generation_config)
>     if training_args.generation_max_length is not None:
>         training_args.generation_config.max_length = training_args.generation_max_length
>     else:
>         training_args.generation_config.max_length = data_args.val_max_target_length
>     if data_args.num_beams is not None:
>         training_args.generation_config.num_beams = data_args.num_beams
>     elif training_args.generation_num_beams is not None:
>         training_args.generation_config.num_beams = training_args.generation_num_beams
661c689
<     trainer = Seq2SeqTrainer(
---
>     trainer = GaudiSeq2SeqTrainer(
662a691
>         gaudi_config=gaudi_config,
695,701c724
<         if isinstance(eval_dataset, dict):
<             metrics = {}
<             for eval_ds_name, eval_ds in eval_dataset.items():
<                 dataset_metrics = trainer.evaluate(eval_dataset=eval_ds, metric_key_prefix=f"eval_{eval_ds_name}")
<                 metrics.update(dataset_metrics)
<         else:
<             metrics = trainer.evaluate(metric_key_prefix="eval")
---
>         metrics = trainer.evaluate(metric_key_prefix="eval")
751,755d773
< 
< 
< def _mp_fn(index):
<     # For xla_spawn (TPUs)
<     main()
