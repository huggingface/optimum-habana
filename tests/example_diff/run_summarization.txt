3c3
< # Copyright 2021 The HuggingFace Team. All rights reserved.
---
> # Copyright 2022 The HuggingFace Team. All rights reserved.
20a21
> import copy
31a33
> import transformers
34,35d35
< 
< import transformers
46,48c46
<     Seq2SeqTrainer,
<     Seq2SeqTrainingArguments,
<     set_seed,
---
>     default_data_collator,
49a48
> from transformers.integrations.deepspeed import is_deepspeed_zero3_enabled
53a53,54
> from optimum.habana import GaudiConfig, GaudiSeq2SeqTrainer, GaudiSeq2SeqTrainingArguments
> from optimum.habana.utils import set_seed
55,56d55
< # Will error if the minimal version of Transformers is not installed. Remove at your own risks.
< check_min_version("4.36.0.dev0")
58c57,63
< require_version("datasets>=1.8.0", "To fix: pip install -r examples/pytorch/summarization/requirements.txt")
---
> try:
>     from optimum.habana.utils import check_optimum_habana_min_version
> except ImportError:
> 
>     def check_optimum_habana_min_version(*a, **b):
>         return ()
> 
61a67,72
> # Will error if the minimal version of Transformers and Optimum Habana are not installed. Remove at your own risks.
> check_min_version("4.34.0")
> check_optimum_habana_min_version("1.8.1")
> 
> require_version("datasets>=1.8.0", "To fix: pip install -r examples/pytorch/summarization/requirements.txt")
> 
122c133
<                 "Whether or not to allow for custom models defined on the Hub in their own modeling files. This option"
---
>                 "Whether or not to allow for custom models defined on the Hub in their own modeling files. This option "
136a148,156
>     use_cache: bool = field(
>         default=True,
>         metadata={
>             "help": (
>                 "Whether or not the model should return the last key/values attentions (not used by all models)."
>                 "Only relevant if `config.is_decoder=True`."
>             )
>         },
>     )
220c240
<                 "efficient on GPU but very bad for TPU."
---
>                 "efficient on GPU but very bad for HPU in lazy mode."
268a289
>     source_suffix: Optional[str] = field(default="", metadata={"help": "A suffix to add after every source text."})
324c345
<     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, Seq2SeqTrainingArguments))
---
>     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, GaudiSeq2SeqTrainingArguments))
362a384,390
>     gaudi_config = GaudiConfig.from_pretrained(
>         training_args.gaudi_config_name,
>         cache_dir=model_args.cache_dir,
>         revision=model_args.model_revision,
>         use_auth_token=True if model_args.use_auth_token else None,
>     )
> 
363a392
>     mixed_precision = training_args.bf16 or gaudi_config.use_torch_autocast or gaudi_config.use_habana_mixed_precision
365,366c394,396
<         f"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}, "
<         + f"distributed training: {training_args.parallel_mode.value == 'distributed'}, 16-bits training: {training_args.fp16}"
---
>         f"Process rank: {training_args.local_rank}, device: {training_args.device}, "
>         + f"distributed training: {training_args.parallel_mode.value == 'distributed'}, "
>         + f"mixed-precision training: {mixed_precision}"
447a478
>         use_cache=False if training_args.gradient_checkpointing else model_args.use_cache,
466a498,503
>     is_bart = model.config.model_type == "bart"
>     if is_bart and training_args.do_train:
>         raise ValueError(
>             "Training is not yet supported for BART. Eval or predict can be enabled with `--do_eval` and `--do_predict`."
>         )
> 
469c506,513
<     embedding_size = model.get_input_embeddings().weight.shape[0]
---
>     embeddings = model.get_input_embeddings()
>     if is_deepspeed_zero3_enabled():
>         import deepspeed
> 
>         with deepspeed.zero.GatheredParameters(embeddings.weight, modifier_rank=None):
>             embedding_size = embeddings.weight.shape[0]
>     else:
>         embedding_size = embeddings.weight.shape[0]
502a547
>     suffix = data_args.source_suffix if data_args.source_suffix is not None else ""
573a619,620
>             else:
>                 raise ValueError("Found case where either text or summary is missing.")
575c622
<         inputs = [prefix + inp for inp in inputs]
---
>         inputs = [prefix + inp + suffix for inp in inputs]
640,645c687,695
<     data_collator = DataCollatorForSeq2Seq(
<         tokenizer,
<         model=model,
<         label_pad_token_id=label_pad_token_id,
<         pad_to_multiple_of=8 if training_args.fp16 else None,
<     )
---
>     if data_args.pad_to_max_length:
>         data_collator = default_data_collator
>     else:
>         data_collator = DataCollatorForSeq2Seq(
>             tokenizer,
>             model=model,
>             label_pad_token_id=label_pad_token_id,
>             pad_to_multiple_of=8 if training_args.fp16 else None,
>         )
680,687c730,738
<     training_args.generation_max_length = (
<         training_args.generation_max_length
<         if training_args.generation_max_length is not None
<         else data_args.val_max_target_length
<     )
<     training_args.generation_num_beams = (
<         data_args.num_beams if data_args.num_beams is not None else training_args.generation_num_beams
<     )
---
>     training_args.generation_config = copy.deepcopy(model.generation_config)
>     if training_args.generation_max_length is not None:
>         training_args.generation_config.max_length = training_args.generation_max_length
>     else:
>         training_args.generation_config.max_length = data_args.val_max_target_length
>     if data_args.num_beams is not None:
>         training_args.generation_config.num_beams = data_args.num_beams
>     elif training_args.generation_num_beams is not None:
>         training_args.generation_config.num_beams = training_args.generation_num_beams
690c741
<     trainer = Seq2SeqTrainer(
---
>     trainer = GaudiSeq2SeqTrainer(
691a743
>         gaudi_config=gaudi_config,
780,784d831
< 
< 
< def _mp_fn(index):
<     # For xla_spawn (TPUs)
<     main()
