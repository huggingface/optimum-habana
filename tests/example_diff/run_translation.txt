31,32d30
< from datasets import load_dataset
< 
33a32
> from datasets import load_dataset
45,46d43
<     Seq2SeqTrainer,
<     Seq2SeqTrainingArguments,
48d44
<     set_seed,
53a50,51
> from optimum.habana import GaudiConfig, GaudiSeq2SeqTrainer, GaudiSeq2SeqTrainingArguments
> from optimum.habana.utils import set_seed
55,56d52
< # Will error if the minimal version of Transformers is not installed. Remove at your own risks.
< check_min_version("4.36.0.dev0")
58c54,60
< require_version("datasets>=1.8.0", "To fix: pip install -r examples/pytorch/translation/requirements.txt")
---
> try:
>     from optimum.habana.utils import check_optimum_habana_min_version
> except ImportError:
> 
>     def check_optimum_habana_min_version(*a, **b):
>         return ()
> 
61a64,69
> # Will error if the minimal version of Transformers and Optimum Habana are not installed. Remove at your own risks.
> check_min_version("4.34.0")
> check_optimum_habana_min_version("1.8.1")
> 
> require_version("datasets>=1.8.0", "To fix: pip install -r examples/pytorch/translation/requirements.txt")
> 
117a126,134
>     use_cache: bool = field(
>         default=True,
>         metadata={
>             "help": (
>                 "Whether or not the model should return the last key/values attentions (not used by all models)."
>                 "Only relevant if `config.is_decoder=True`."
>             )
>         },
>     )
188c205
<                 "efficient on GPU but very bad for TPU."
---
>                 "efficient on GPU but very bad for HPU in lazy mode."
273c290
<     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, Seq2SeqTrainingArguments))
---
>     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, GaudiSeq2SeqTrainingArguments))
311a329,335
>     gaudi_config = GaudiConfig.from_pretrained(
>         training_args.gaudi_config_name,
>         cache_dir=model_args.cache_dir,
>         revision=model_args.model_revision,
>         use_auth_token=True if model_args.use_auth_token else None,
>     )
> 
312a337
>     mixed_precision = training_args.bf16 or gaudi_config.use_torch_autocast or gaudi_config.use_habana_mixed_precision
314,315c339,341
<         f"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}, "
<         + f"distributed training: {training_args.parallel_mode.value == 'distributed'}, 16-bits training: {training_args.fp16}"
---
>         f"Process rank: {training_args.local_rank}, device: {training_args.device}, "
>         + f"distributed training: {training_args.parallel_mode.value == 'distributed'}, "
>         + f"mixed-precision training: {mixed_precision}"
396a423
>         use_cache=False if training_args.gradient_checkpointing else model_args.use_cache,
593c620
<     trainer = Seq2SeqTrainer(
---
>     trainer = GaudiSeq2SeqTrainer(
594a622
>         gaudi_config=gaudi_config,
687,691d714
< 
< 
< def _mp_fn(index):
<     # For xla_spawn (TPUs)
<     main()
