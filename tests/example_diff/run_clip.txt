18d17
< 
32a32
> import transformers
33a34
> from habana_dataloader_trainer import HabanaDataloaderTrainer
38,39d38
< 
< import transformers
45,47d43
<     Trainer,
<     TrainingArguments,
<     set_seed,
52a49,59
> from optimum.habana import GaudiConfig, GaudiTrainer, GaudiTrainingArguments
> from optimum.habana.utils import set_seed
> 
> 
> try:
>     from optimum.habana.utils import check_optimum_habana_min_version
> except ImportError:
> 
>     def check_optimum_habana_min_version(*a, **b):
>         return ()
> 
56,57c63,65
< # Will error if the minimal version of Transformers is not installed. Remove at your own risks.
< check_min_version("4.42.0.dev0")
---
> # Will error if the minimal version of Transformers and Optimum Habana are not installed. Remove at your own risks.
> check_min_version("4.38.0")
> check_optimum_habana_min_version("1.10.0")
181a190,192
>     mediapipe_dataloader: bool = field(
>         default=False, metadata={"help": "Turn on MediaPipe hardware-based accelerated data loading."}
>     )
240c251
<     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, TrainingArguments))
---
>     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, GaudiTrainingArguments))
268a280,286
>     gaudi_config = GaudiConfig.from_pretrained(
>         training_args.gaudi_config_name,
>         cache_dir=model_args.cache_dir,
>         revision=model_args.model_revision,
>         token=model_args.token,
>     )
> 
269a288
>     mixed_precision = training_args.bf16 or gaudi_config.use_torch_autocast
271,272c290,292
<         f"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}, "
<         + f"distributed training: {training_args.parallel_mode.value == 'distributed'}, 16-bits training: {training_args.fp16}"
---
>         f"Process rank: {training_args.local_rank}, device: {training_args.device}, "
>         + f"distributed training: {training_args.parallel_mode.value == 'distributed'}, "
>         + f"mixed-precision training: {mixed_precision}"
419d438
<     image_transformations = torch.jit.script(image_transformations)
466,467c485,493
<         # Transform images on the fly as doing it on the whole dataset takes too much time.
<         train_dataset.set_transform(transform_images)
---
>         if data_args.mediapipe_dataloader:
>             train_dataset.image_mean = image_processor.image_mean
>             train_dataset.image_std = image_processor.image_std
>             train_dataset.text_max_length = data_args.max_seq_length
>             train_dataset.image_resize = config.vision_config.image_size
>             train_dataset.transform_func = transform_images
>         else:
>             # Transform images on the fly as doing it on the whole dataset takes too much time.
>             train_dataset.set_transform(transform_images)
489,490c515,523
<         # Transform images on the fly as doing it on the whole dataset takes too much time.
<         eval_dataset.set_transform(transform_images)
---
>         if data_args.mediapipe_dataloader:
>             eval_dataset.image_mean = image_processor.image_mean
>             eval_dataset.image_std = image_processor.image_std
>             eval_dataset.text_max_length = data_args.max_seq_length
>             eval_dataset.image_resize = config.vision_config.image_size
>             eval_dataset.transform_func = transform_images
>         else:
>             # Transform images on the fly as doing it on the whole dataset takes too much time.
>             eval_dataset.set_transform(transform_images)
513a547,555
>         if data_args.mediapipe_dataloader:
>             test_dataset.image_mean = image_processor.image_mean
>             test_dataset.image_std = image_processor.image_std
>             test_dataset.text_max_length = data_args.max_seq_length
>             test_dataset.image_resize = config.vision_config.image_size
>             test_dataset.transform_func = transform_images
>         else:
>             # Transform images on the fly as doing it on the whole dataset takes too much time.
>             test_dataset.set_transform(transform_images)
516c558,559
<     trainer = Trainer(
---
>     trainer_cls = HabanaDataloaderTrainer if data_args.mediapipe_dataloader else GaudiTrainer
>     trainer = trainer_cls(
517a561
>         gaudi_config=gaudi_config,
