17d16
< """ Conditional text generation with the auto-regressive models of the library (GPT/GPT-2/CTRL/Transformer-XL/XLNet)
19c18,19
< 
---
> Conditional text generation on Habana Gaudi/Gaudi2.
> """
22c22
< import inspect
---
> import json
24c24,28
< from typing import Tuple
---
> import math
> import os
> import time
> from itertools import cycle
> from pathlib import Path
27,28c31
< from accelerate import PartialState
< from accelerate.utils import set_seed
---
> from utils import adjust_batch, count_hpu_graphs, initialize_model
30,52c33
< from transformers import (
<     AutoTokenizer,
<     BloomForCausalLM,
<     BloomTokenizerFast,
<     CTRLLMHeadModel,
<     CTRLTokenizer,
<     GenerationMixin,
<     GPT2LMHeadModel,
<     GPT2Tokenizer,
<     GPTJForCausalLM,
<     LlamaForCausalLM,
<     LlamaTokenizer,
<     OpenAIGPTLMHeadModel,
<     OpenAIGPTTokenizer,
<     OPTForCausalLM,
<     TransfoXLLMHeadModel,
<     TransfoXLTokenizer,
<     XLMTokenizer,
<     XLMWithLMHeadModel,
<     XLNetLMHeadModel,
<     XLNetTokenizer,
< )
< from transformers.modeling_outputs import CausalLMOutputWithPast
---
> from optimum.habana.utils import get_hpu_memory_stats
62,266d42
< MAX_LENGTH = int(10000)  # Hardcoded max length to avoid infinite loop
< 
< MODEL_CLASSES = {
<     "gpt2": (GPT2LMHeadModel, GPT2Tokenizer),
<     "ctrl": (CTRLLMHeadModel, CTRLTokenizer),
<     "openai-gpt": (OpenAIGPTLMHeadModel, OpenAIGPTTokenizer),
<     "xlnet": (XLNetLMHeadModel, XLNetTokenizer),
<     "transfo-xl": (TransfoXLLMHeadModel, TransfoXLTokenizer),
<     "xlm": (XLMWithLMHeadModel, XLMTokenizer),
<     "gptj": (GPTJForCausalLM, AutoTokenizer),
<     "bloom": (BloomForCausalLM, BloomTokenizerFast),
<     "llama": (LlamaForCausalLM, LlamaTokenizer),
<     "opt": (OPTForCausalLM, GPT2Tokenizer),
< }
< 
< # Padding text to help Transformer-XL and XLNet with short prompts as proposed by Aman Rusia
< # in https://github.com/rusiaaman/XLNet-gen#methodology
< # and https://medium.com/@amanrusia/xlnet-speaks-comparison-to-gpt-2-ea1a4e9ba39e
< PREFIX = """In 1991, the remains of Russian Tsar Nicholas II and his family
< (except for Alexei and Maria) are discovered.
< The voice of Nicholas's young son, Tsarevich Alexei Nikolaevich, narrates the
< remainder of the story. 1883 Western Siberia,
< a young Grigori Rasputin is asked by his father and a group of men to perform magic.
< Rasputin has a vision and denounces one of the men as a horse thief. Although his
< father initially slaps him for making such an accusation, Rasputin watches as the
< man is chased outside and beaten. Twenty years later, Rasputin sees a vision of
< the Virgin Mary, prompting him to become a priest. Rasputin quickly becomes famous,
< with people, even a bishop, begging for his blessing. <eod> </s> <eos>"""
< 
< 
< #
< # Functions to prepare models' input
< #
< 
< 
< def prepare_ctrl_input(args, _, tokenizer, prompt_text):
<     if args.temperature > 0.7:
<         logger.info("CTRL typically works better with lower temperatures (and lower top_k).")
< 
<     encoded_prompt = tokenizer.encode(prompt_text, add_special_tokens=False)
<     if not any(encoded_prompt[0] == x for x in tokenizer.control_codes.values()):
<         logger.info("WARNING! You are not starting your generation from a control code so you won't get good results")
<     return prompt_text
< 
< 
< def prepare_xlm_input(args, model, tokenizer, prompt_text):
<     # kwargs = {"language": None, "mask_token_id": None}
< 
<     # Set the language
<     use_lang_emb = hasattr(model.config, "use_lang_emb") and model.config.use_lang_emb
<     if hasattr(model.config, "lang2id") and use_lang_emb:
<         available_languages = model.config.lang2id.keys()
<         if args.xlm_language in available_languages:
<             language = args.xlm_language
<         else:
<             language = None
<             while language not in available_languages:
<                 language = input("Using XLM. Select language in " + str(list(available_languages)) + " >>> ")
< 
<         model.config.lang_id = model.config.lang2id[language]
<         # kwargs["language"] = tokenizer.lang2id[language]
< 
<     # TODO fix mask_token_id setup when configurations will be synchronized between models and tokenizers
<     # XLM masked-language modeling (MLM) models need masked token
<     # is_xlm_mlm = "mlm" in args.model_name_or_path
<     # if is_xlm_mlm:
<     #     kwargs["mask_token_id"] = tokenizer.mask_token_id
< 
<     return prompt_text
< 
< 
< def prepare_xlnet_input(args, _, tokenizer, prompt_text):
<     prefix = args.prefix if args.prefix else args.padding_text if args.padding_text else PREFIX
<     prompt_text = prefix + prompt_text
<     return prompt_text
< 
< 
< def prepare_transfoxl_input(args, _, tokenizer, prompt_text):
<     prefix = args.prefix if args.prefix else args.padding_text if args.padding_text else PREFIX
<     prompt_text = prefix + prompt_text
<     return prompt_text
< 
< 
< PREPROCESSING_FUNCTIONS = {
<     "ctrl": prepare_ctrl_input,
<     "xlm": prepare_xlm_input,
<     "xlnet": prepare_xlnet_input,
<     "transfo-xl": prepare_transfoxl_input,
< }
< 
< 
< def adjust_length_to_model(length, max_sequence_length):
<     if length < 0 and max_sequence_length > 0:
<         length = max_sequence_length
<     elif 0 < max_sequence_length < length:
<         length = max_sequence_length  # No generation bigger than model size
<     elif length < 0:
<         length = MAX_LENGTH  # avoid infinite loop
<     return length
< 
< 
< def sparse_model_config(model_config):
<     embedding_size = None
<     if hasattr(model_config, "hidden_size"):
<         embedding_size = model_config.hidden_size
<     elif hasattr(model_config, "n_embed"):
<         embedding_size = model_config.n_embed
<     elif hasattr(model_config, "n_embd"):
<         embedding_size = model_config.n_embd
< 
<     num_head = None
<     if hasattr(model_config, "num_attention_heads"):
<         num_head = model_config.num_attention_heads
<     elif hasattr(model_config, "n_head"):
<         num_head = model_config.n_head
< 
<     if embedding_size is None or num_head is None or num_head == 0:
<         raise ValueError("Check the model config")
< 
<     num_embedding_size_per_head = int(embedding_size / num_head)
<     if hasattr(model_config, "n_layer"):
<         num_layer = model_config.n_layer
<     elif hasattr(model_config, "num_hidden_layers"):
<         num_layer = model_config.num_hidden_layers
<     else:
<         raise ValueError("Number of hidden layers couldn't be determined from the model config")
< 
<     return num_layer, num_head, num_embedding_size_per_head
< 
< 
< def generate_past_key_values(model, batch_size, seq_len):
<     num_block_layers, num_attention_heads, num_embedding_size_per_head = sparse_model_config(model.config)
<     if model.config.model_type == "bloom":
<         past_key_values = tuple(
<             (
<                 torch.empty(int(num_attention_heads * batch_size), num_embedding_size_per_head, seq_len)
<                 .to(model.dtype)
<                 .to(model.device),
<                 torch.empty(int(num_attention_heads * batch_size), seq_len, num_embedding_size_per_head)
<                 .to(model.dtype)
<                 .to(model.device),
<             )
<             for _ in range(num_block_layers)
<         )
<     else:
<         past_key_values = tuple(
<             (
<                 torch.empty(batch_size, num_attention_heads, seq_len, num_embedding_size_per_head)
<                 .to(model.dtype)
<                 .to(model.device),
<                 torch.empty(batch_size, num_attention_heads, seq_len, num_embedding_size_per_head)
<                 .to(model.dtype)
<                 .to(model.device),
<             )
<             for _ in range(num_block_layers)
<         )
<     return past_key_values
< 
< 
< def prepare_jit_inputs(inputs, model, tokenizer):
<     batch_size = len(inputs)
<     dummy_input = tokenizer.batch_encode_plus(inputs, return_tensors="pt")
<     dummy_input = dummy_input.to(model.device)
<     if model.config.use_cache:
<         dummy_input["past_key_values"] = generate_past_key_values(model, batch_size, 1)
<     dummy_input["attention_mask"] = torch.cat(
<         [
<             torch.zeros(dummy_input["attention_mask"].shape[0], 1)
<             .to(dummy_input["attention_mask"].dtype)
<             .to(model.device),
<             dummy_input["attention_mask"],
<         ],
<         -1,
<     )
<     return dummy_input
< 
< 
< class _ModelFallbackWrapper(GenerationMixin):
<     __slots__ = ("_optimized", "_default")
< 
<     def __init__(self, optimized, default):
<         self._optimized = optimized
<         self._default = default
< 
<     def __call__(self, *args, **kwargs):
<         if kwargs["past_key_values"] is None and self._default.config.use_cache:
<             kwargs["past_key_values"] = generate_past_key_values(self._default, kwargs["input_ids"].shape[0], 0)
<         kwargs.pop("position_ids", None)
<         for k in list(kwargs.keys()):
<             if kwargs[k] is None or isinstance(kwargs[k], bool):
<                 kwargs.pop(k)
<         outputs = self._optimized(**kwargs)
<         lm_logits = outputs[0]
<         past_key_values = outputs[1]
<         fixed_output = CausalLMOutputWithPast(
<             loss=None,
<             logits=lm_logits,
<             past_key_values=past_key_values,
<             hidden_states=None,
<             attentions=None,
<         )
<         return fixed_output
< 
<     def __getattr__(self, item):
<         return getattr(self._default, item)
268,287c44,46
<     def prepare_inputs_for_generation(
<         self, input_ids, past_key_values=None, inputs_embeds=None, use_cache=None, **kwargs
<     ):
<         return self._default.prepare_inputs_for_generation(
<             input_ids, past_key_values=past_key_values, inputs_embeds=inputs_embeds, use_cache=use_cache, **kwargs
<         )
< 
<     def _reorder_cache(
<         self, past_key_values: Tuple[Tuple[torch.Tensor]], beam_idx: torch.Tensor
<     ) -> Tuple[Tuple[torch.Tensor]]:
<         """
<         This function is used to re-order the `past_key_values` cache if [`~PretrainedModel.beam_search`] or
<         [`~PretrainedModel.beam_sample`] is called. This is required to match `past_key_values` with the correct
<         beam_idx at every generation step.
<         """
<         return self._default._reorder_cache(past_key_values, beam_idx)
< 
< 
< def main():
<     parser = argparse.ArgumentParser()
---
> def setup_parser(parser):
>     # Arguments management
>     parser.add_argument("--device", "-d", type=str, choices=["hpu"], help="Device to run", default="hpu")
289c48
<         "--model_type",
---
>         "--model_name_or_path",
293c52
<         help="Model type selected in the list: " + ", ".join(MODEL_CLASSES.keys()),
---
>         help="Path to pre-trained model (on the HF Hub or locally).",
296c55,83
<         "--model_name_or_path",
---
>         "--bf16",
>         action="store_true",
>         help="Whether to perform generation in bf16 precision.",
>     )
>     parser.add_argument("--max_new_tokens", type=int, default=100, help="Number of tokens to generate.")
>     parser.add_argument(
>         "--max_input_tokens",
>         type=int,
>         default=0,
>         help="If > 0 then pad and truncate the input sequences to this specified length of tokens. \
>             if == 0, then truncate to 16 (original default) \
>             if < 0, then do not truncate, use full input prompt",
>     )
>     parser.add_argument("--batch_size", type=int, default=1, help="Input batch size.")
>     parser.add_argument("--warmup", type=int, default=3, help="Number of warmup iterations for benchmarking.")
>     parser.add_argument("--n_iterations", type=int, default=5, help="Number of inference iterations for benchmarking.")
>     parser.add_argument("--local_rank", type=int, default=0, metavar="N", help="Local process rank.")
>     parser.add_argument(
>         "--use_kv_cache",
>         action="store_true",
>         help="Whether to use the key/value cache for decoding. It should speed up generation.",
>     )
>     parser.add_argument(
>         "--use_hpu_graphs",
>         action="store_true",
>         help="Whether to use HPU graphs or not. Using HPU graphs should give better latencies.",
>     )
>     parser.add_argument(
>         "--dataset_name",
299,300c86
<         required=True,
<         help="Path to pre-trained model or shortcut name selected in the list: " + ", ".join(MODEL_CLASSES.keys()),
---
>         help="Optional argument if you want to assess your model on a given dataset of the HF Hub.",
302,306d87
< 
<     parser.add_argument("--prompt", type=str, default="")
<     parser.add_argument("--length", type=int, default=20)
<     parser.add_argument("--stop_token", type=str, default=None, help="Token at which text generation is stopped")
< 
308,311c89,92
<         "--temperature",
<         type=float,
<         default=1.0,
<         help="temperature of 1.0 has no effect, lower tend toward greedy sampling",
---
>         "--column_name",
>         default=None,
>         type=str,
>         help="If `--dataset_name` was given, this will be the name of the column to use as prompts for generation.",
314c95,221
<         "--repetition_penalty", type=float, default=1.0, help="primarily useful for CTRL model; in that case, use 1.2"
---
>         "--do_sample",
>         action="store_true",
>         help="Whether to use sampling for generation.",
>     )
>     parser.add_argument(
>         "--num_beams",
>         default=1,
>         type=int,
>         help="Number of beams used for beam search generation. 1 means greedy search will be performed.",
>     )
>     parser.add_argument(
>         "--trim_logits",
>         action="store_true",
>         help="Calculate logits only for the last token to save memory in the first step.",
>     )
>     parser.add_argument(
>         "--seed",
>         default=27,
>         type=int,
>         help="Seed to use for random generation. Useful to reproduce your runs with `--do_sample`.",
>     )
>     parser.add_argument(
>         "--profiling_warmup_steps",
>         default=0,
>         type=int,
>         help="Number of steps to ignore for profiling.",
>     )
>     parser.add_argument(
>         "--profiling_steps",
>         default=0,
>         type=int,
>         help="Number of steps to capture for profiling.",
>     )
>     parser.add_argument(
>         "--prompt",
>         default=None,
>         type=str,
>         nargs="*",
>         help='Optional argument to give a prompt of your choice as input. Can be a single string (eg: --prompt "Hello world"), or a list of space-separated strings (eg: --prompt "Hello world" "How are you?")',
>     )
>     parser.add_argument(
>         "--bad_words",
>         default=None,
>         type=str,
>         nargs="+",
>         help="Optional argument list of words that are not allowed to be generated.",
>     )
>     parser.add_argument(
>         "--force_words",
>         default=None,
>         type=str,
>         nargs="+",
>         help="Optional argument list of words that must be generated.",
>     )
>     parser.add_argument(
>         "--peft_model",
>         default=None,
>         type=str,
>         help="Optional argument to give a path to a PEFT model.",
>     )
>     parser.add_argument("--num_return_sequences", type=int, default=1)
>     parser.add_argument(
>         "--token",
>         default=None,
>         type=str,
>         help="The token to use as HTTP bearer authorization for remote files. If not specified, will use the token "
>         "generated when running `huggingface-cli login` (stored in `~/.huggingface`).",
>     )
>     parser.add_argument(
>         "--model_revision",
>         default="main",
>         type=str,
>         help="The specific model version to use (can be a branch name, tag name or commit id).",
>     )
>     parser.add_argument(
>         "--attn_softmax_bf16",
>         action="store_true",
>         help="Whether to run attention softmax layer in lower precision provided that the model supports it and "
>         "is also running in lower precision.",
>     )
>     parser.add_argument(
>         "--output_dir",
>         default=None,
>         type=str,
>         help="Output directory to store results in.",
>     )
>     parser.add_argument(
>         "--bucket_size",
>         default=-1,
>         type=int,
>         help="Bucket size to maintain static shapes. If this number is negative (default is -1) \
>             then we use `shape = prompt_length + max_new_tokens`. If a positive number is passed \
>             we increase the bucket in steps of `bucket_size` instead of allocating to max (`prompt_length + max_new_tokens`).",
>     )
>     parser.add_argument(
>         "--bucket_internal",
>         action="store_true",
>         help="Split kv sequence into buckets in decode phase. It improves throughput when max_new_tokens is large.",
>     )
>     parser.add_argument(
>         "--dataset_max_samples",
>         default=-1,
>         type=int,
>         help="If a negative number is passed (default = -1) perform inference on the whole dataset, else use only `dataset_max_samples` samples.",
>     )
>     parser.add_argument(
>         "--limit_hpu_graphs",
>         action="store_true",
>         help="Skip HPU Graph usage for first token to save memory",
>     )
>     parser.add_argument(
>         "--reuse_cache",
>         action="store_true",
>         help="Whether to reuse key/value cache for decoding. It should save memory.",
>     )
>     parser.add_argument("--verbose_workers", action="store_true", help="Enable output from non-master workers")
>     parser.add_argument(
>         "--simulate_dyn_prompt",
>         default=None,
>         type=int,
>         nargs="*",
>         help="If empty, static prompt is used. If a comma separated list of integers is passed, we warmup and use those shapes for prompt length.",
>     )
>     parser.add_argument(
>         "--reduce_recompile",
>         action="store_true",
>         help="Preprocess on cpu, and some other optimizations. Useful to prevent recompilations when using dynamic prompts (simulate_dyn_prompt)",
316,321d222
<     parser.add_argument("--k", type=int, default=0)
<     parser.add_argument("--p", type=float, default=0.9)
< 
<     parser.add_argument("--prefix", type=str, default="", help="Text added prior to input.")
<     parser.add_argument("--padding_text", type=str, default="", help="Deprecated, the use of `--prefix` is preferred.")
<     parser.add_argument("--xlm_language", type=str, default="", help="Optional language when used with the XLM model.")
323c224,229
<     parser.add_argument("--seed", type=int, default=42, help="random seed for initialization")
---
>     parser.add_argument("--fp8", action="store_true", help="Enable Quantization to fp8")
>     parser.add_argument(
>         "--use_flash_attention",
>         action="store_true",
>         help="Whether to enable Habana Flash Attention, provided that the model supports it.",
>     )
325c231
<         "--use_cpu",
---
>         "--flash_attention_recompute",
327c233
<         help="Whether or not to use cpu. If set to False, " "we will use gpu/npu or mps device if available",
---
>         help="Whether to enable Habana Flash Attention in recompute mode on first token generation. This gives an opportunity of splitting graph internally which helps reduce memory consumption.",
329d234
<     parser.add_argument("--num_return_sequences", type=int, default=1, help="The number of samples to generate.")
331c236
<         "--fp16",
---
>         "--flash_attention_causal_mask",
333c238,261
<         help="Whether to use 16-bit (mixed) precision (through NVIDIA apex) instead of 32-bit",
---
>         help="Whether to enable Habana Flash Attention in causal mode on first token generation.",
>     )
>     parser.add_argument(
>         "--book_source",
>         action="store_true",
>         help="Whether to use project Guttenberg books data as input. Usefull for testing large sequence lenghts.",
>     )
>     parser.add_argument(
>         "--torch_compile",
>         action="store_true",
>         help="Whether to use torch compiled model or not.",
>     )
>     parser.add_argument("--temperature", default=1.0, type=float, help="Temperature value for text generation")
>     parser.add_argument("--top_p", default=1.0, type=float, help="Top_p value for generating text via sampling")
>     parser.add_argument(
>         "--const_serialization_path",
>         "--csp",
>         type=str,
>         help="Path to serialize const params. Const params will be held on disk memory instead of being allocated on host memory.",
>     )
>     parser.add_argument(
>         "--disk_offload",
>         action="store_true",
>         help="Whether to enable device map auto. In case no space left on cpu, weights will be offloaded to disk.",
335d262
<     parser.add_argument("--jit", action="store_true", help="Whether or not to use jit trace to accelerate inference")
338,339c265,266
<     # Initialize the distributed state.
<     distributed_state = PartialState(cpu=args.use_cpu)
---
>     if args.torch_compile:
>         args.use_hpu_graphs = False
341c268,269
<     logger.warning(f"device: {distributed_state.device}, 16-bits inference: {args.fp16}")
---
>     if not args.use_hpu_graphs:
>         args.limit_hpu_graphs = False
343,344c271,272
<     if args.seed is not None:
<         set_seed(args.seed)
---
>     args.quant_config = os.getenv("QUANT_CONFIG", "")
>     return args
346,378d273
<     # Initialize the model and tokenizer
<     try:
<         args.model_type = args.model_type.lower()
<         model_class, tokenizer_class = MODEL_CLASSES[args.model_type]
<     except KeyError:
<         raise KeyError("the model {} you specified is not supported. You are welcome to add it and open a PR :)")
< 
<     tokenizer = tokenizer_class.from_pretrained(args.model_name_or_path)
<     if tokenizer.pad_token is None:
<         tokenizer.pad_token = tokenizer.eos_token
<     model = model_class.from_pretrained(args.model_name_or_path)
< 
<     # Set the model to the right device
<     model.to(distributed_state.device)
< 
<     if args.fp16:
<         model.half()
<     max_seq_length = getattr(model.config, "max_position_embeddings", 0)
<     args.length = adjust_length_to_model(args.length, max_sequence_length=max_seq_length)
<     logger.info(args)
< 
<     prompt_text = args.prompt if args.prompt else input("Model prompt >>> ")
< 
<     # Different models need different input formatting and/or extra arguments
<     requires_preprocessing = args.model_type in PREPROCESSING_FUNCTIONS.keys()
<     if requires_preprocessing:
<         prepare_input = PREPROCESSING_FUNCTIONS.get(args.model_type)
<         preprocessed_prompt_text = prepare_input(args, model, tokenizer, prompt_text)
< 
<         if model.__class__.__name__ in ["TransfoXLLMHeadModel"]:
<             tokenizer_kwargs = {"add_space_before_punct_symbol": True}
<         else:
<             tokenizer_kwargs = {}
380,386c275,278
<         encoded_prompt = tokenizer.encode(
<             preprocessed_prompt_text, add_special_tokens=False, return_tensors="pt", **tokenizer_kwargs
<         )
<     else:
<         prefix = args.prefix if args.prefix else args.padding_text
<         encoded_prompt = tokenizer.encode(prefix + prompt_text, add_special_tokens=False, return_tensors="pt")
<     encoded_prompt = encoded_prompt.to(distributed_state.device)
---
> def main():
>     parser = argparse.ArgumentParser()
>     args = setup_parser(parser)
>     model, tokenizer, generation_config = initialize_model(args, logger)
388,389c280,468
<     if encoded_prompt.size()[-1] == 0:
<         input_ids = None
---
>     use_lazy_mode = True
>     if args.torch_compile and model.config.model_type == "llama":
>         use_lazy_mode = False
> 
>     import habana_frameworks.torch.hpu as torch_hpu
> 
>     if args.dataset_name is None:
>         # Benchmark over the prompts below
>         if args.prompt:
>             input_sentences = args.prompt
>         elif args.book_source:
> 
>             def download_book(book_id):
>                 import os
> 
>                 import requests
> 
>                 url = f"https://www.gutenberg.org/cache/epub/{book_id}/pg{book_id}.txt"
>                 response = requests.get(url)
>                 if response.status_code == 200:
>                     pid = os.getpid()
>                     save_path = f"/tmp/{book_id}_{pid}.txt"
>                     with open(save_path, "wb") as file:
>                         file.write(response.content)
>                     print(f"Book downloaded and saved to: {save_path}")
>                     return save_path
>                 else:
>                     print("Failed to download book! Exiting...")
>                     import sys
> 
>                     sys.exit()
> 
>             def assemble_prompt(prompt_size, book_path):
>                 prompt = ""
>                 counter = 0
>                 book_lines = open(book_path).readlines()
>                 for line in book_lines:
>                     for word in line.split():
>                         counter += 1
>                         prompt += word + " "
>                         if counter == prompt_size:
>                             return [prompt] * args.batch_size
> 
>             book_ids = [
>                 2701,  # Moby Dick; Or, The Whale
>                 1513,  # Romeo and Juliet
>                 1342,  # Pride and Prejudice
>             ]
>             input_sentences = assemble_prompt(prompt_size=args.max_input_tokens, book_path=download_book(book_ids[0]))
>         else:
>             input_sentences = [
>                 "DeepSpeed is a machine learning framework",
>                 "He is working on",
>                 "He has a",
>                 "He got all",
>                 "Everyone is happy and I can",
>                 "The new movie that got Oscar this year",
>                 "In the far far distance from our galaxy,",
>                 "Peace is the only way",
>             ]
> 
>         if args.batch_size > len(input_sentences):
>             # Dynamically extends to support larger batch sizes
>             num_sentences_to_add = args.batch_size - len(input_sentences)
>             for i in range(num_sentences_to_add):
>                 input_sentences.append(input_sentences[i % len(input_sentences)])
>         elif args.batch_size < len(input_sentences):
>             input_sentences = input_sentences[: args.batch_size]
> 
>         def generate(size=None, reduce_recompile=False):
>             """Generates sequences from the input sentences and returns them."""
> 
>             # Tokenization
>             if args.max_input_tokens > 0:
>                 input_tokens = tokenizer.batch_encode_plus(
>                     input_sentences,
>                     return_tensors="pt",
>                     padding="max_length",
>                     max_length=args.max_input_tokens,
>                     truncation=True,
>                 )
>             else:
>                 input_tokens = tokenizer.batch_encode_plus(input_sentences, return_tensors="pt", padding=True)
> 
>             if size is not None:
>                 input_tokens = adjust_batch(input_tokens, size)
>             if not reduce_recompile:
>                 # Move inputs to target device(s)
>                 for t in input_tokens:
>                     if torch.is_tensor(input_tokens[t]):
>                         input_tokens[t] = input_tokens[t].to(args.device)
> 
>             outputs = model.generate(
>                 **input_tokens,
>                 generation_config=generation_config,
>                 lazy_mode=use_lazy_mode,
>                 hpu_graphs=args.use_hpu_graphs,
>                 profiling_steps=args.profiling_steps,
>                 profiling_warmup_steps=args.profiling_warmup_steps,
>             ).cpu()
>             return tokenizer.batch_decode(outputs, skip_special_tokens=True)
> 
>         from optimum.habana.utils import HabanaProfile
> 
>         # compilation stage disable profiling
>         HabanaProfile.disable()
>         # Compilation
>         logger.info("Graph compilation...")
>         dyn_prompt_lens = args.simulate_dyn_prompt
>         t0 = time.perf_counter()
>         # The first three iterations take longer because of graph compilation
>         if dyn_prompt_lens is None or len(set(dyn_prompt_lens)) == 1:
>             for _ in range(args.warmup):
>                 if dyn_prompt_lens is None:
>                     print("Warming up", flush=True)
>                     generate(None, args.reduce_recompile)
>                 else:
>                     print("Warming up for shape,", dyn_prompt_lens[0], flush=True)
>                     generate(dyn_prompt_lens[0], args.reduce_recompile)
>         else:
>             if args.bucket_size > 0:
>                 mn = min(dyn_prompt_lens)
>                 mx = max(dyn_prompt_lens)
> 
>                 def rounder(x):
>                     return int(math.ceil(x / args.bucket_size) * args.bucket_size)
> 
>                 min_prompt_len = rounder(mn)
>                 max_sentence_len = rounder(mx)
>                 for _ in range(args.warmup):
>                     lst = list(range(min_prompt_len, max_sentence_len + 1, args.bucket_size))
>                     for sz in lst:
>                         print("Warming up for shape,", sz - 1, flush=True)
>                         generate(sz - 1, args.reduce_recompile)
>         torch_hpu.synchronize()
>         compilation_duration = time.perf_counter() - t0
>         HabanaProfile.enable()
>         total_new_tokens_generated = 0
>         logger.info("Running generate...")
>         t0 = time.perf_counter()
>         # Benchmark over n_iterations iterations
>         if dyn_prompt_lens is None:
>             for i in range(args.n_iterations):
>                 generated = generate(None, args.reduce_recompile)
>         else:
>             repeated_prompt_len = cycle(dyn_prompt_lens)
>             for i in range(args.n_iterations):
>                 prompt_len = next(repeated_prompt_len)
>                 print("Generating for shape,", prompt_len)
>                 generated = generate(prompt_len, args.reduce_recompile)
>         duration = time.perf_counter() - t0
>         total_new_tokens_generated = args.n_iterations * args.batch_size * args.max_new_tokens
>         throughput = total_new_tokens_generated / duration
> 
>         print()
>         print("Input/outputs:")
>         for i, input_sentence in enumerate(zip(input_sentences)):
>             print(f"input {i+1}: {input_sentence}")
>             for j, output in enumerate(
>                 zip(generated[args.num_return_sequences * i : args.num_return_sequences * (i + 1)])
>             ):
>                 print(f"output {j+1}: {output}")
>             print()
> 
>         # Store results if necessary
>         if args.output_dir is not None and args.global_rank == 0:
>             output_dir = Path(args.output_dir)
>             output_dir.mkdir(parents=True, exist_ok=True)
> 
>             results = {
>                 "throughput": throughput,
>                 "output": output,
>             }
>             with (output_dir / "results.json").open("w", encoding="utf-8") as f:
>                 json.dump(results, f, ensure_ascii=False, indent=4)
> 
>         stats = f"Throughput (including tokenization) = {throughput} tokens/second"
>         stats = stats + f"\nNumber of HPU graphs                = {count_hpu_graphs()}"
>         separator = "-" * len(stats)
>         print()
>         print("Stats:")
>         print(separator)
>         print(stats)
>         mem = get_hpu_memory_stats()
>         for k, v in mem.items():
>             print("{:35} = {} GB".format(k[:-5].replace("_", " ").capitalize(), v))
>         print(f"Graph compilation duration          = {compilation_duration} seconds")
>         print(separator)
>         print()
391c470,487
<         input_ids = encoded_prompt
---
>         # Downloading and loading a dataset from the hub.
>         from datasets import load_dataset
>         from torch.utils.data import DataLoader
> 
>         assert args.simulate_dyn_prompt == "", "Both dataset_name and simulate_dyn_prompt are set"
> 
>         raw_dataset = load_dataset(args.dataset_name)
>         if "test" in raw_dataset:
>             split = "test"
>         elif "validation" in raw_dataset:
>             split = "validation"
>         else:
>             split = "train"
>         raw_dataset = (
>             raw_dataset[split]
>             .shuffle()
>             .select(range(args.dataset_max_samples if args.dataset_max_samples > 0 else (raw_dataset[split]).num_rows))
>         )
393,399c489,496
<     if args.jit:
<         jit_input_texts = ["enable jit"]
<         jit_inputs = prepare_jit_inputs(jit_input_texts, model, tokenizer)
<         torch._C._jit_set_texpr_fuser_enabled(False)
<         model.config.return_dict = False
<         if hasattr(model, "forward"):
<             sig = inspect.signature(model.forward)
---
>         if args.column_name is None:
>             # If no column name is given, take the first column that has strings
>             column_name = [key for key in raw_dataset.features.keys() if raw_dataset.features[key].dtype == "string"][
>                 0
>             ]
>             logger.info(
>                 f"No column name was given so automatically choosing '{column_name}' for prompts. If you would like to use another column of the dataset, you can set the argument `--column_name`."
>             )
401,439c498,518
<             sig = inspect.signature(model.__call__)
<         jit_inputs = tuple(jit_inputs[key] for key in sig.parameters if jit_inputs.get(key, None) is not None)
<         traced_model = torch.jit.trace(model, jit_inputs, strict=False)
<         traced_model = torch.jit.freeze(traced_model.eval())
<         traced_model(*jit_inputs)
<         traced_model(*jit_inputs)
< 
<         model = _ModelFallbackWrapper(traced_model, model)
< 
<     output_sequences = model.generate(
<         input_ids=input_ids,
<         max_length=args.length + len(encoded_prompt[0]),
<         temperature=args.temperature,
<         top_k=args.k,
<         top_p=args.p,
<         repetition_penalty=args.repetition_penalty,
<         do_sample=True,
<         num_return_sequences=args.num_return_sequences,
<     )
< 
<     # Remove the batch dimension when returning multiple sequences
<     if len(output_sequences.shape) > 2:
<         output_sequences.squeeze_()
< 
<     generated_sequences = []
< 
<     for generated_sequence_idx, generated_sequence in enumerate(output_sequences):
<         print(f"=== GENERATED SEQUENCE {generated_sequence_idx + 1} ===")
<         generated_sequence = generated_sequence.tolist()
< 
<         # Decode text
<         text = tokenizer.decode(generated_sequence, clean_up_tokenization_spaces=True)
< 
<         # Remove all text after the stop token
<         text = text[: text.find(args.stop_token) if args.stop_token else None]
< 
<         # Add the prompt at the beginning of the sequence. Remove the excess text that was used for pre-processing
<         total_sequence = (
<             prompt_text + text[len(tokenizer.decode(encoded_prompt[0], clean_up_tokenization_spaces=True)) :]
---
>             column_name = args.column_name
> 
>         # Remove unused columns
>         raw_dataset = raw_dataset.remove_columns([name for name in raw_dataset.column_names if name != column_name])
> 
>         # Set the prompt length to args.max_input_tokens if > 0 else (if 0 truncate to 16, otherwise use full length)
>         prompt_length = args.max_input_tokens if args.max_input_tokens > 0 else (-1, 16)[args.max_input_tokens == 0]
> 
>         def preprocess_function(examples):
>             # Tokenize the texts
>             return tokenizer(
>                 examples[column_name],
>                 padding="max_length",
>                 max_length=prompt_length if prompt_length > 0 else None,
>                 truncation=prompt_length > 0,
>             )
> 
>         raw_dataset = raw_dataset.map(
>             preprocess_function,
>             batched=True,
>             desc="Running tokenizer on dataset",
440a520,600
>         # After tokenization, we can remove the column of interest
>         raw_dataset = raw_dataset.remove_columns([column_name])
>         raw_dataset.set_format(type="torch")
> 
>         if prompt_length <= 0:
>             # Todo please check if this collate function is suitable for your model
>             # This has been tested for OPT, llama, and Bloom
>             assert model.config.model_type in ["opt", "bloom", "llama"]
> 
>             def collate_fn(data):
>                 collect = {k: [dt[k] for dt in data] for k in data[0]}
>                 result = {}
>                 for k in collect:
>                     tensors = collect[k]
>                     max_shape = max([item.shape[0] for item in tensors])
>                     result[k] = torch.stack(
>                         [torch.cat((torch.zeros(max_shape - t.shape[0], dtype=t.dtype), t)) for t in tensors], 0
>                     )
>                 return result
> 
>         else:
>             collate_fn = None
> 
>         dataloader = DataLoader(raw_dataset, batch_size=args.batch_size, collate_fn=collate_fn)
> 
>         def generate_dataset(batch):
>             prompt = tokenizer.batch_decode(batch["input_ids"], skip_special_tokens=True)
>             # Move inputs to target device(s)
>             for t in batch:
>                 if torch.is_tensor(batch[t]):
>                     batch[t] = batch[t].to(args.device)
>             # Generate new sequences
>             outputs = model.generate(
>                 **batch,
>                 generation_config=generation_config,
>                 lazy_mode=use_lazy_mode,
>                 hpu_graphs=args.use_hpu_graphs,
>                 profiling_steps=args.profiling_steps,
>                 profiling_warmup_steps=args.profiling_warmup_steps,
>             ).cpu()
>             return prompt, outputs
> 
>         # warmup
>         if prompt_length > 0:
>             from optimum.habana.utils import HabanaProfile
> 
>             # compilation stage disable profiling
>             HabanaProfile.disable()
>             # Compilation
>             logger.info("Graph compilation...")
>             t0 = time.perf_counter()
>             for i, batch in enumerate(dataloader):
>                 generate_dataset(batch)
>                 # The first three iterations take longer because of graph compilation
>                 if (i + 1) == 3:
>                     break
>             torch_hpu.synchronize()
>             compilation_duration = time.perf_counter() - t0
>             HabanaProfile.enable()
> 
>         total_new_tokens_generated = 0
>         duration = 0
>         separator = "-" * 50
>         logger.info("Running generate dataset...")
>         t_start = time.time()
>         for i, batch in enumerate(dataloader):
>             t0 = time.perf_counter()
>             prompt, outputs = generate_dataset(batch)
>             duration += time.perf_counter() - t0
>             total_new_tokens_generated += args.batch_size * args.max_new_tokens
>             print(separator)
>             print(f"Batch n°{i+1}")
>             print(f"Input: {prompt[:args.batch_size]}")
>             print(
>                 f"Output: {tokenizer.batch_decode(outputs, skip_special_tokens=True)[:args.batch_size*args.num_return_sequences]}"
>             )
>             print(separator)
>         t_end = time.time()
> 
>         throughput = total_new_tokens_generated / duration
>         # Print Stats
442,443c602,620
<         generated_sequences.append(total_sequence)
<         print(total_sequence)
---
>         stats = f"Throughput (including tokenization) = {throughput} tokens/second"
>         separator = "-" * len(stats)
>         print()
>         print("Stats:")
>         print(separator)
>         print(stats)
>         print("Total runtime for dataset:", t_end - t_start)
>         mem = get_hpu_memory_stats()
>         for k, v in mem.items():
>             print("{:35} = {} GB".format(k[:-5].replace("_", " ").capitalize(), v))
>         if prompt_length > 0:
>             print(f"Graph compilation duration          = {compilation_duration} seconds")
>         print(separator)
>     if args.quant_config:
>         import habana_quantization_toolkit
> 
>         habana_quantization_toolkit.finish_measurements(model)
>     if args.const_serialization_path and os.path.isdir(args.const_serialization_path):
>         import shutil
445c622
<     return generated_sequences
---
>         shutil.rmtree(args.const_serialization_path)
