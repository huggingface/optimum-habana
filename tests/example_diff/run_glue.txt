30,31d29
< from datasets import load_dataset
< 
32a31
> from datasets import load_dataset
41,42d39
<     Trainer,
<     TrainingArguments,
44d40
<     set_seed,
49a46,58
> from optimum.habana import GaudiConfig, GaudiTrainer, GaudiTrainingArguments
> from optimum.habana.utils import set_seed
> 
> 
> try:
>     from optimum.habana.utils import check_optimum_habana_min_version
> except ImportError:
> 
>     def check_optimum_habana_min_version(*a, **b):
>         return ()
> 
> 
> logger = logging.getLogger(__name__)
51,52c60,62
< # Will error if the minimal version of Transformers is not installed. Remove at your own risks.
< check_min_version("4.36.0.dev0")
---
> # Will error if the minimal version of Transformers and Optimum Habana are not installed. Remove at your own risks.
> check_min_version("4.34.0")
> check_optimum_habana_min_version("1.8.1")
68,69d77
< logger = logging.getLogger(__name__)
< 
228c236
<     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, TrainingArguments))
---
>     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, GaudiTrainingArguments))
266a275,281
>     gaudi_config = GaudiConfig.from_pretrained(
>         training_args.gaudi_config_name,
>         cache_dir=model_args.cache_dir,
>         revision=model_args.model_revision,
>         use_auth_token=True if model_args.use_auth_token else None,
>     )
> 
267a283
>     mixed_precision = training_args.bf16 or gaudi_config.use_torch_autocast or gaudi_config.use_habana_mixed_precision
269,270c285,287
<         f"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}, "
<         + f"distributed training: {training_args.parallel_mode.value == 'distributed'}, 16-bits training: {training_args.fp16}"
---
>         f"Process rank: {training_args.local_rank}, device: {training_args.device}, "
>         + f"distributed training: {training_args.parallel_mode.value == 'distributed'}, "
>         + f"mixed-precision training: {mixed_precision}"
543c560
<     trainer = Trainer(
---
>     trainer = GaudiTrainer(
544a562
>         gaudi_config=gaudi_config,
644,648d661
< 
< 
< def _mp_fn(index):
<     # For xla_spawn (TPUs)
<     main()
