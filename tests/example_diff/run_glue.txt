29,30d28
< from datasets import load_dataset
< 
31a30
> from datasets import load_dataset
40,41d38
<     Trainer,
<     TrainingArguments,
43d39
<     set_seed,
48a45,47
> from optimum.habana import GaudiConfig, GaudiTrainer, GaudiTrainingArguments
> from optimum.habana.utils import set_seed
> 
51c50
< check_min_version("4.32.0.dev0")
---
> check_min_version("4.31.0")
211c210
<     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, TrainingArguments))
---
>     parser = HfArgumentParser((ModelArguments, DataTrainingArguments, GaudiTrainingArguments))
240a240,246
>     gaudi_config = GaudiConfig.from_pretrained(
>         training_args.gaudi_config_name,
>         cache_dir=model_args.cache_dir,
>         revision=model_args.model_revision,
>         use_auth_token=True if model_args.use_auth_token else None,
>     )
> 
241a248
>     mixed_precision = training_args.bf16 or gaudi_config.use_torch_autocast or gaudi_config.use_habana_mixed_precision
243,244c250,252
<         f"Process rank: {training_args.local_rank}, device: {training_args.device}, n_gpu: {training_args.n_gpu}"
<         + f"distributed training: {training_args.parallel_mode.value == 'distributed'}, 16-bits training: {training_args.fp16}"
---
>         f"Process rank: {training_args.local_rank}, device: {training_args.device}, "
>         + f"distributed training: {bool(training_args.local_rank != -1)}, "
>         + f"mixed-precision training: {mixed_precision}"
514c522
<     trainer = Trainer(
---
>     trainer = GaudiTrainer(
515a524
>         gaudi_config=gaudi_config,
615,619d623
< 
< 
< def _mp_fn(index):
<     # For xla_spawn (TPUs)
<     main()
